using DiscService.Constants;
using DiscService.Messaging.Models;
using DiscService.Models;

namespace DiscService.Services.Utils;

public static class KeyboardBuilder
{
    private static readonly Dictionary<string, string> LabelMap = new()
    {
        ["–ê"] = "A",
        ["–ë"] = "B",
        ["–í"] = "C",
        ["–ì"] = "D"
    };

    public static InlineKeyboardMarkup BuildAnswerKeyboard(Question question)
    {
        var rows = question.Answers
            .Select(a => new InlineKeyboardButton(
                $"{a.Label}",
                $"{BotCommands.AnswerPrefix}{LabelMap[a.Label]}"
            ))
            .Chunk(2)
            .Select(chunk => chunk.ToList())
            .ToList();

        return new InlineKeyboardMarkup(rows);
    }

    public static InlineKeyboardMarkup BuildDiscInfoKeyboard()
    {
        return new InlineKeyboardMarkup(
        [
            [new InlineKeyboardButton("üìö –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Å–∏—Ö–æ—Ç–∏–ø–æ–≤", BotCommands.GetInfoCallback)]
        ]);
    }

    public static InlineKeyboardMarkup BuildBeginTestKeyboard()
    {
        return new InlineKeyboardMarkup(
        [
            [new InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", BotCommands.BeginTestCallback)]
        ]);
    }

    public static InlineKeyboardMarkup BuildTestResultKeyboard()
    {
        return new InlineKeyboardMarkup(
        [
            [new InlineKeyboardButton("üìö –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Å–∏—Ö–æ—Ç–∏–ø–æ–≤", BotCommands.GetInfoCallback)],
            [new InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", BotCommands.CompareResultsCallback)]
        ]);
    }
}