using DiscService.Bot.Commands;
using DiscService.Bot.Messaging.Models;
using DiscService.Core.Models;

namespace DiscService.Bot.UI;

/// <summary>
/// –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä Telegram-–±–æ—Ç–∞.
/// </summary>
public static class KeyboardBuilder
{
    private static readonly Dictionary<string, string> LabelMap = new()
    {
        ["–ê"] = "A",
        ["–ë"] = "B",
        ["–í"] = "C",
        ["–ì"] = "D"
    };

    /// <summary>
    /// –§–æ—Ä–º–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å DISC-—Ç–µ—Å—Ç–∞.
    /// </summary>
    /// <param name="question">–í–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤.</param>
    /// <returns>–†–∞–∑–º–µ—Ç–∫–∞ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤.</returns>
    public static InlineKeyboardMarkup BuildAnswerKeyboard(Question question)
    {
        var rows = question.Answers
            .Select(a => new InlineKeyboardButton(
                $"{a.Label}",
                $"{BotCommands.AnswerPrefix}{LabelMap[a.Label]}"
            ))
            .Chunk(2)
            .Select(chunk => chunk.ToList())
            .ToList();

        return new InlineKeyboardMarkup(rows);
    }
    /// <summary>
    /// –§–æ—Ä–º–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Å–∏—Ö–æ—Ç–∏–ø–∞—Ö DISC.
    /// </summary>
    /// <returns>–†–∞–∑–º–µ—Ç–∫–∞ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</returns>
    public static InlineKeyboardMarkup BuildDiscInfoKeyboard()
    {
        return new InlineKeyboardMarkup(
        [
            [new InlineKeyboardButton("üìö –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Å–∏—Ö–æ—Ç–∏–ø–æ–≤", BotCommands.GetInfoCallback)]
        ]);
    }

    /// <summary>
    /// –§–æ—Ä–º–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ DISC-—Ç–µ—Å—Ç–∞.
    /// </summary>
    /// <returns>–†–∞–∑–º–µ—Ç–∫–∞ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.</returns>
    public static InlineKeyboardMarkup BuildBeginTestKeyboard()
    {
        return new InlineKeyboardMarkup(
        [
            [new InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", BotCommands.BeginTestCallback)]
        ]);
    }

    /// <summary>
    /// –§–æ—Ä–º–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞.
    /// </summary>
    /// <returns>–†–∞–∑–º–µ—Ç–∫–∞ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.</returns>
    public static InlineKeyboardMarkup BuildResultMenuKeyboard()
    {
        return new InlineKeyboardMarkup(
        [
            [new InlineKeyboardButton("üìö –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Å–∏—Ö–æ—Ç–∏–ø–æ–≤", BotCommands.GetInfoCallback)],
            [new InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", BotCommands.CompareResultsCallback)]
        ]);
    }
}