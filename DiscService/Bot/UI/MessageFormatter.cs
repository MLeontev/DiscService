using System.Text;
using DiscService.Core.Models;

namespace DiscService.Bot.UI;

/// <summary>
/// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram-–±–æ—Ç–µ.
/// </summary>
public static class MessageFormatter
{
    /// <summary>
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤.
    /// </summary>
    /// <param name="question">–í–æ–ø—Ä–æ—Å DISC-—Ç–µ—Å—Ç–∞.</param>
    /// <param name="questionsCount">–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ.</param>
    /// <returns>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤.</returns>
    public static string FormatQuestion(Question question, int questionsCount)
    {
        var sb = new StringBuilder();
        sb.AppendLine($"*–í–æ–ø—Ä–æ—Å {question.Number} –∏–∑ {questionsCount}*:");
        sb.AppendLine($"{question.Text}");
        foreach (var option in question.Answers)
        {
            sb.AppendLine($"\n*{option.Label})* {option.Text}");
        }
        
        sb.AppendLine();
        sb.AppendLine("üëá –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ");

        return sb.ToString();
    }

    /// <summary>
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç DISC-—Ç–µ—Å—Ç–∞.
    /// </summary>
    /// <param name="result">–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞.</param>
    /// <returns>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–º–∏ –∏ –≤—Ç–æ—Ä–∏—á–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏.</returns>
    public static string FormatResult(TestResult result)
    {
        var sb = new StringBuilder();
        sb.AppendLine($"*{DiscType.Dominance.ToEmoji()} D:* {result.DominanceScore}");
        sb.AppendLine($"*{DiscType.Influence.ToEmoji()} I:* {result.InfluenceScore}");
        sb.AppendLine($"*{DiscType.Steadiness.ToEmoji()} S:* {result.SteadinessScore}");
        sb.AppendLine($"*{DiscType.Compliance.ToEmoji()} C:* {result.ComplianceScore}");
        sb.AppendLine();
        
        var scores = new Dictionary<DiscType, int>
        {
            { DiscType.Dominance, result.DominanceScore },
            { DiscType.Influence, result.InfluenceScore },
            { DiscType.Steadiness, result.SteadinessScore },
            { DiscType.Compliance, result.ComplianceScore }
        };
        
        var maxScore = scores.Max(x => x.Value);
        
        var primaryTypes = scores
            .Where(kvp => kvp.Value == maxScore)
            .Select(kvp => kvp.Key)
            .ToList();

        if (primaryTypes.Count == scores.Count)
        {
            sb.AppendLine("*–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —á–µ—Ç—ã—Ä—ë—Ö —Å—Ç–∏–ª–µ–π DISC.*");
        }
        else if (primaryTypes.Count > 1)
        {
            sb.AppendLine($"*–í–∞—à–∏ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Å—Ç–∏–ª–∏ ‚Äî {string.Join(", ", primaryTypes.Select(t => $"{t.ToEmoji()} {t.ToString()[0]}"))}*");
        }
        else
        {
            var primaryType = primaryTypes.Single();
            var secondaryTypes = scores
                .Where(x => x.Key != primaryType && x.Value >= maxScore - 2)
                .Select(x => x.Key)
                .ToList();
            
            if (secondaryTypes.Count == 0)
            {
                sb.AppendLine($"*–í–∞—à –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å ‚Äî {primaryType.ToEmoji()} {primaryType.ToString()[0]}*");
            }
            else
            {
                sb.AppendLine($"*–í–∞—à –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å ‚Äî {primaryType.ToEmoji()} {primaryType.ToString()[0]}, –≤—Ç–æ—Ä–∏—á–Ω—ã–π(–µ) ‚Äî {string.Join(", ", secondaryTypes.Select(t => $"{t.ToEmoji()} {t.ToString()[0]}"))}*");
            }
        }
        
        return sb.ToString();
    }

    /// <summary>
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö DISC.
    /// </summary>
    /// <param name="infos">–°–ø–∏—Å–æ–∫ –æ–ø–∏—Å–∞–Ω–∏–π DISC-—Ç–∏–ø–æ–≤.</param>
    /// <returns>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞.</returns>
    public static string FormatDiscInfo(List<DiscInfo> infos)
    {
        var sb = new StringBuilder();

        foreach (var info in infos)
        {
            sb.AppendLine($"{info.DiscType.ToEmoji()} *{info.DiscType.ToString()[0]}-–¥–æ–º–∏–Ω–∞–Ω—Ç–∞* ({info.DiscName})");
            sb.AppendLine($"_–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {string.Join(", ", info.Keywords)}_");
            sb.AppendLine(info.Description);
            sb.AppendLine();
        }

        return sb.ToString();
    }

    /// <summary>
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ DISC-—Ç–µ—Å—Ç–∞.
    /// </summary>
    /// <param name="previous">–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.</param>
    /// <param name="current">–¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.</param>
    /// <returns>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–Ω–∏—Ü–µ–π –ø–æ —à–∫–∞–ª–∞–º DISC.</returns>
    public static string FormatComparison(TestResult previous, TestResult current)
    {
        var sb = new StringBuilder();
        sb.AppendLine("*–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:*");
        sb.AppendLine($"_–ü—Ä–µ–¥—ã–¥—É—â–∏–π: {previous.FinishedAt:dd.MM.yyyy}_");
        sb.AppendLine($"_–¢–µ–∫—É—â–∏–π: {current.FinishedAt:dd.MM.yyyy}_");
        sb.AppendLine();

        sb.AppendLine($"{DiscType.Dominance.ToEmoji()} *D*: {DiffText(previous.DominanceScore, current.DominanceScore)}");
        sb.AppendLine($"{DiscType.Influence.ToEmoji()} *I*: {DiffText(previous.InfluenceScore, current.InfluenceScore)}");
        sb.AppendLine($"{DiscType.Steadiness.ToEmoji()} *S*: {DiffText(previous.SteadinessScore, current.SteadinessScore)}");
        sb.AppendLine($"{DiscType.Compliance.ToEmoji()} *C*: {DiffText(previous.ComplianceScore, current.ComplianceScore)}");

        return sb.ToString();
    }

    private static string DiffText(int oldScore, int newScore)
    {
        var diff = newScore - oldScore;

        if (diff == 0)
            return $"{newScore} (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)";

        var changeSymbol = diff > 0 ? "+" : "-";

        return $"{oldScore} ‚Üí {newScore} ({changeSymbol}{Math.Abs(diff)})";
    }
}